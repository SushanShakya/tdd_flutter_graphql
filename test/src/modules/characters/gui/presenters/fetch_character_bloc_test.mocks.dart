// Mocks generated by Mockito 5.2.0 from annotations
// in tdd_flutter_graphql/test/src/modules/characters/gui/presenters/fetch_character_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tdd_flutter_graphql/src/core/interface/usecases/usecase.dart'
    as _i8;
import 'package:tdd_flutter_graphql/src/modules/characters/data/repo/interface/characters_repo.dart'
    as _i2;
import 'package:tdd_flutter_graphql/src/modules/characters/data/repo/interface/paginated_characters_repo.dart'
    as _i3;
import 'package:tdd_flutter_graphql/src/modules/characters/domain/entities/character_entity.dart'
    as _i7;
import 'package:tdd_flutter_graphql/src/modules/characters/domain/usecases/fetch_all_characters_usecase.dart'
    as _i5;
import 'package:tdd_flutter_graphql/src/modules/characters/domain/usecases/fetch_paginated_characters_usecase.dart'
    as _i9;
import 'package:tdd_flutter_graphql/src/modules/common/data/models/paginated.dart'
    as _i4;
import 'package:tdd_flutter_graphql/src/modules/common/domain/param/pagination_param.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCharactersRepo_0 extends _i1.Fake implements _i2.CharactersRepo {}

class _FakePaginatedCharactersRepo_1 extends _i1.Fake
    implements _i3.PaginatedCharactersRepo {}

class _FakePaginated_2<T extends Object> extends _i1.Fake
    implements _i4.Paginated<T> {}

/// A class which mocks [FetchAllCharactersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchAllCharactersUseCase extends _i1.Mock
    implements _i5.FetchAllCharactersUseCase {
  MockFetchAllCharactersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharactersRepo get repo => (super.noSuchMethod(Invocation.getter(#repo),
      returnValue: _FakeCharactersRepo_0()) as _i2.CharactersRepo);
  @override
  _i6.Future<List<_i7.CharacterEntity>> call(_i8.NoParam? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue: Future<List<_i7.CharacterEntity>>.value(
                  <_i7.CharacterEntity>[]))
          as _i6.Future<List<_i7.CharacterEntity>>);
}

/// A class which mocks [FetchPaginatedCharactersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPaginatedCharactersUseCase extends _i1.Mock
    implements _i9.FetchPaginatedCharactersUseCase {
  MockFetchPaginatedCharactersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PaginatedCharactersRepo get repo =>
      (super.noSuchMethod(Invocation.getter(#repo),
              returnValue: _FakePaginatedCharactersRepo_1())
          as _i3.PaginatedCharactersRepo);
  @override
  set oldParam(_i10.PageParam? _oldParam) =>
      super.noSuchMethod(Invocation.setter(#oldParam, _oldParam),
          returnValueForMissingStub: null);
  @override
  set cache(_i4.Paginated<List<_i7.CharacterEntity>>? _cache) =>
      super.noSuchMethod(Invocation.setter(#cache, _cache),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i4.Paginated<List<_i7.CharacterEntity>>> call(
          _i10.PageParam? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
          returnValue: Future<_i4.Paginated<List<_i7.CharacterEntity>>>.value(
              _FakePaginated_2<List<_i7.CharacterEntity>>())) as _i6
          .Future<_i4.Paginated<List<_i7.CharacterEntity>>>);
}
